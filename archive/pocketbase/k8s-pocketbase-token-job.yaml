apiVersion: v1
kind: ServiceAccount
metadata:
  name: shisha-pocketbase-token-job-sa
  namespace: shisha
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: shisha-pocketbase-token-job-role
  namespace: shisha
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: shisha-pocketbase-token-job-rb
  namespace: shisha
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: shisha-pocketbase-token-job-role
subjects:
  - kind: ServiceAccount
    name: shisha-pocketbase-token-job-sa
    namespace: shisha
---
apiVersion: batch/v1
kind: Job
metadata:
  name: shisha-pocketbase-token-create
  namespace: shisha
spec:
  backoffLimit: 3
  ttlSecondsAfterFinished: 300
  template:
    spec:
      serviceAccountName: shisha-pocketbase-token-job-sa
      restartPolicy: OnFailure
      containers:
        - name: token-creator
          image: curlimages/curl:8.2.1
          imagePullPolicy: IfNotPresent
          env:
            - name: POCKETBASE_URL
              value: "http://shisha-pocketbase:8090"
            - name: ADMIN_EMAIL
              valueFrom:
                secretKeyRef:
                  name: pocketbase-admin
                  key: email
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pocketbase-admin
                  key: password
            - name: NAMESPACE
              value: shisha
          command:
            - /bin/sh
            - -c
            - |
              set -eu
              SECRET_NAME="shisha-pocketbase-token"
              RETRIES=60
              SLEEP=2
              i=0
              echo "waiting for PocketBase at $POCKETBASE_URL ..."
              until [ $i -ge $RETRIES ]
              do
                # try a quick connect to the service (succeeds even on 4xx/5xx) to ensure TCP path is up
                if curl -s --connect-timeout 5 "$POCKETBASE_URL/" >/dev/null 2>&1; then
                  echo "pocketbase service reachable"
                  break
                fi
                i=$((i+1))
                sleep $SLEEP
              done
              if [ $i -ge $RETRIES ]; then
                echo "timeout waiting for PocketBase service"
                exit 1
              fi
              if kubectl get secret "$SECRET_NAME" -n "$NAMESPACE" >/dev/null 2>&1; then
                echo "token secret $SECRET_NAME already exists; skipping creation"
                exit 0
              fi
              # Try multiple POST formats and print full responses for debugging
              try_post() {
                local desc=$1
                local data=$2
                echo "attempt: $desc"
                # print headers + body
                resp=$(curl -i -s -X POST -H "Content-Type: ${3:-application/json}" -d "$data" "$POCKETBASE_URL/api/admins/auth-with-password" 2>/dev/null || true)
                echo "---- response ($desc) ----"
                echo "$resp"
                echo "---- end response ----"
                # extract token from typical fields
                token=$(echo "$resp" | tr -d '\r\n' | sed -E 's/.*"token":"([^"]+)".*/\1/;t; s/.*"data":\{.*"token":"([^"]+)".*/\1/;t; s/.*"accessToken":"([^"]+)".*/\1/;t; s/.*/null/')
                if [ -n "$token" ] && [ "$token" != "null" ]; then
                  echo "extracted token"
                  echo "$token"
                  return 0
                fi
                return 1
              }
              # Attempt JSON with identity
              if try_post "json-identity" "{\"identity\":\"$ADMIN_EMAIL\",\"password\":\"$ADMIN_PASSWORD\"}"; then
                token=$(echo "$token")
              # Attempt JSON with email
              elif try_post "json-email" "{\"email\":\"$ADMIN_EMAIL\",\"password\":\"$ADMIN_PASSWORD\"}"; then
                token=$(echo "$token")
              # Attempt form-encoded
              elif try_post "form-urlencoded" "email=$ADMIN_EMAIL&password=$ADMIN_PASSWORD" "application/x-www-form-urlencoded"; then
                token=$(echo "$token")
              else
                echo "no token returned from any POST attempt"
                exit 1
              fi
              # apply the secret only if token present and non-empty
              if [ -n "$token" ] && [ "$token" != "null" ]; then
                echo "creating secret $SECRET_NAME in namespace $NAMESPACE"
                kubectl create secret generic "$SECRET_NAME" -n "$NAMESPACE" --from-literal=token="$token" --dry-run=client -o yaml | kubectl apply -f -
                echo "secret created"
                exit 0
              else
                echo "token invalid after extraction: $token"
                exit 1
              fi
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      tolerations:
        - operator: "Exists"