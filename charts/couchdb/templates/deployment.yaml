apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "couchdb.fullname" . }}
  labels:
    {{- include "couchdb.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "couchdb.fullname" . }}-headless
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "couchdb.name" . }}
  template:
    metadata:
      labels:
        app: {{ include "couchdb.name" . }}
    spec:
      initContainers:
        - name: join-cluster
          image: curlimages/curl:8.1.2
          env:
            - name: COUCHDB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.env.adminSecretName | default "couchdb-admin" }}
                  key: username
            - name: COUCHDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.env.adminSecretName | default "couchdb-admin" }}
                  key: password
            - name: DESIRED_REPLICAS
              value: "{{ .Values.env.desiredReplicas | default 3 }}"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          command:
            - /bin/sh
            - -c
            - |
              set -eu
              POD_ORDINAL=${POD_NAME##*-}
              COUCHDB_LOCAL_URL="http://localhost:{{ .Values.service.port }}"
              HEADLESS0="http://{{ include "couchdb.fullname" . }}-0.{{ include "couchdb.fullname" . }}-headless:{{ .Values.service.port }}"
              until curl -sSf "$COUCHDB_LOCAL_URL/"; do sleep 2; done
              MEMBERSHIP=$(curl -sS -u "$COUCHDB_USER:$COUCHDB_PASSWORD" "$COUCHDB_LOCAL_URL/_membership" || echo "")
              echo "membership: $MEMBERSHIP"
              if echo "$MEMBERSHIP" | grep -q '"cluster_nodes":\s*\["nonode@nohost"\]'; then
                if [ "$POD_ORDINAL" -eq 0 ]; then
                  echo "pod0: enabling cluster"
                  curl -sS -u "$COUCHDB_USER:$COUCHDB_PASSWORD" -X POST "$HEADLESS0/_cluster_setup" -H "Content-Type: application/json" -d '{"action":"enable_cluster","bind_address":"0.0.0.0","username":"'"$COUCHDB_USER"'","password":"'"$COUCHDB_PASSWORD"'","port":'"{{ .Values.service.port }}"',"node_count":'"$DESIRED_REPLICAS"'}' || true
                  echo "pod0: finishing cluster"
                  curl -sS -u "$COUCHDB_USER:$COUCHDB_PASSWORD" -X POST "$HEADLESS0/_cluster_setup" -H "Content-Type: application/json" -d '{"action":"finish_cluster"}' || true
                else
                  TARGET_HOST="${POD_NAME}.{{ include "couchdb.fullname" . }}-headless"
                  echo "adding node $TARGET_HOST"
                  curl -sS -u "$COUCHDB_USER:$COUCHDB_PASSWORD" -X POST "$HEADLESS0/_cluster_setup" -H "Content-Type: application/json" -d '{"action":"add_node","host":"'"$TARGET_HOST"'","port":'"{{ .Values.service.port }}"',"username":"'"$COUCHDB_USER"'","password":"'"$COUCHDB_PASSWORD"'"}' || true
                fi
              else
                echo "cluster already configured"
              fi
      containers:
        - name: couchdb
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: COUCHDB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.env.adminSecretName | default "couchdb-admin" }}
                  key: username
            - name: COUCHDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.env.adminSecretName | default "couchdb-admin" }}
                  key: password
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
          volumeMounts:
            - name: couchdb-data
              mountPath: /opt/couchdb/data
          readinessProbe:
            httpGet:
              path: /_up
              port: {{ .Values.service.port }}
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 12
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.service.port }}
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
  volumeClaimTemplates:
    - metadata:
        name: couchdb-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.persistence.size | default "1Gi" }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}

---
# Headless service for peer discovery (StatefulSet)
apiVersion: v1
kind: Service
metadata:
  name: {{ include "couchdb.fullname" . }}-headless
  labels:
    {{- include "couchdb.labels" . | nindent 4 }}
spec:
  clusterIP: None
  ports:
    - port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.port }}
      protocol: TCP
      name: http
  selector:
    app: {{ include "couchdb.name" . }}

---
# ClusterIP service for backend connections (use this DNS: {{ include "couchdb.fullname" . }}:{{ .Values.service.port }})
apiVersion: v1
kind: Service
metadata:
  name: {{ include "couchdb.fullname" . }}
  labels:
    {{- include "couchdb.labels" . | nindent 4 }}
spec:
  type: {{ .Values.service.type | default "ClusterIP" }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.port }}
      protocol: TCP
      name: http
  selector:
    app: {{ include "couchdb.name" . }}