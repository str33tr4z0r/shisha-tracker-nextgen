apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "couchdb.fullname" . }}
  labels:
    {{- include "couchdb.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "couchdb.name" . }}-headless
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "couchdb.name" . }}
  template:
    metadata:
      labels:
        app: {{ include "couchdb.name" . }}
    spec:
      serviceAccountName: {{ .Values.serviceAccountName | default "default" }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds | default 120 }}
      securityContext:
        runAsUser: {{ .Values.runAsUser | default 5984 }}
        runAsGroup: {{ .Values.runAsGroup | default 5984 }}
        fsGroup: {{ .Values.fsGroup | default 5984 }}
      initContainers:
        - name: init-cookie
          image: busybox:1.36
          securityContext:
            runAsUser: 0
            runAsGroup: 0
          command: ["/bin/sh","-c"]
          args:
            - |
              set -eu
              mkdir -p /cookie
              cp /secret/.erlang.cookie /cookie/.erlang.cookie
              chown {{ .Values.runAsUser | default 5984 }}:{{ .Values.runAsGroup | default 5984 }} /cookie/.erlang.cookie
              chmod 400 /cookie/.erlang.cookie
          volumeMounts:
            - name: erlang-cookie-secret
              mountPath: /secret
              readOnly: true
            - name: erlang-cookie-file
              mountPath: /cookie

        - name: init-admins
          image: busybox:1.36
          securityContext:
            runAsUser: 0
            runAsGroup: 0
          env:
            - name: COUCHDB_USER
              valueFrom: { secretKeyRef: { name: {{ .Values.env.adminSecretName | quote }}, key: COUCHDB_USER } }
            - name: COUCHDB_PASSWORD
              valueFrom: { secretKeyRef: { name: {{ .Values.env.adminSecretName | quote }}, key: COUCHDB_PASSWORD } }
          command: ["/bin/sh","-c"]
          args:
            - |
              set -eu
              mkdir -p /locald
              cat > /locald/10-admins.ini <<EOF
              [admins]
              ${COUCHDB_USER} = ${COUCHDB_PASSWORD}
              EOF
              chown {{ .Values.runAsUser | default 5984 }}:{{ .Values.runAsGroup | default 5984 }} /locald/10-admins.ini
              chmod 640 /locald/10-admins.ini
          volumeMounts:
            - name: couchdb-locald-extra
              mountPath: /locald

        - name: fix-perms
          image: busybox:1.36
          securityContext:
            runAsUser: 0
            runAsGroup: 0
          command: ["/bin/sh","-c"]
          args:
            - |
              set -eu
              mkdir -p /data
              chown -R {{ .Values.runAsUser | default 5984 }}:{{ .Values.runAsGroup | default 5984 }} /data
          volumeMounts:
            - name: couchdb-data
              mountPath: /data

      containers:
        - name: couchdb
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - { name: http, containerPort: {{ .Values.service.port }} }
            - { name: epmd, containerPort: 4369 }
            - { name: erlang-9100, containerPort: 9100 }
            - { name: erlang-9101, containerPort: 9101 }
            - { name: erlang-9102, containerPort: 9102 }
            - { name: erlang-9103, containerPort: 9103 }
            - { name: erlang-9104, containerPort: 9104 }
            - { name: erlang-9105, containerPort: 9105 }
          env:
            - name: POD_NAMESPACE
              valueFrom: { fieldRef: { fieldPath: metadata.namespace } }
            - name: HOSTNAME
              valueFrom: { fieldRef: { fieldPath: metadata.name } }
            - name: ERLANG_COOKIE
              valueFrom: { secretKeyRef: { name: {{ .Values.env.adminSecretName | quote }}, key: ERLANG_COOKIE } }
          command: ["/bin/sh","-lc"]
          args:
            - |
              set -eu
              HOST_FQDN="${HOSTNAME}.{{ include "couchdb.name" . }}-headless.${POD_NAMESPACE}.svc.cluster.local"
              export ERL_FLAGS="-name couchdb@${HOST_FQDN} -setcookie ${ERLANG_COOKIE} -kernel inet_dist_listen_min 9100 inet_dist_listen_max 9105"
              exec /opt/couchdb/bin/couchdb
          readinessProbe:
            httpGet: { path: /_up, port: {{ .Values.service.port }} }
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds | default 15 }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds | default 5 }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds | default 2 }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold | default 6 }}
          livenessProbe:
            httpGet: { path: /_up, port: {{ .Values.service.port }} }
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 20 }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds | default 3 }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold | default 8 }}
          volumeMounts:
            - name: couchdb-data
              mountPath: /opt/couchdb/data
            - name: erlang-cookie-file
              mountPath: /opt/couchdb/.erlang.cookie
              subPath: .erlang.cookie
              readOnly: true
            - name: couchdb-config
              mountPath: /opt/couchdb/etc/local.d/00-local.ini
              subPath: 00-local.ini
              readOnly: true
            - name: couchdb-locald-extra
              mountPath: /opt/couchdb/etc/local.d/10-admins.ini
              subPath: 10-admins.ini
              readOnly: true

        - name: cluster-manager
          image: {{ .Values.clusterManager.image | default "curlimages/curl:8.1.0" }}
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh","-c"]
          args:
            - |
              set -eu
              /opt/couchdb-scripts/manager.sh
          env:
            - name: POD_NAMESPACE
              valueFrom: { fieldRef: { fieldPath: metadata.namespace } }
            - name: COUCHDB_USER
              valueFrom: { secretKeyRef: { name: {{ .Values.env.adminSecretName | quote }}, key: COUCHDB_USER } }
            - name: COUCHDB_PASSWORD
              valueFrom: { secretKeyRef: { name: {{ .Values.env.adminSecretName | quote }}, key: COUCHDB_PASSWORD } }
            - name: HOSTNAME
              valueFrom: { fieldRef: { fieldPath: metadata.name } }
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","/opt/couchdb-scripts/prestop.sh || true"]
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - 'curl -sS -o /dev/null -w "%{http_code}" http://127.0.0.1:5984/_up | grep -q "^200$"'
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 12
          volumeMounts:
            - name: couchdb-scripts
              mountPath: /opt/couchdb-scripts
              readOnly: true

      volumes:
        - name: couchdb-scripts
          configMap:
            name: {{ .Values.scriptsConfigMapName | default "couchdb-scripts" }}
            defaultMode: 0755
        - name: couchdb-config
          configMap:
            name: {{ .Values.configMapName | default "couchdb-config" }}
        - name: couchdb-locald-extra
          emptyDir: {}
        - name: erlang-cookie-secret
          secret:
            secretName: {{ .Values.env.adminSecretName | default "shisha-couchdb-admin" }}
            items:
              - key: ERLANG_COOKIE
                path: .erlang.cookie
        - name: erlang-cookie-file
          emptyDir: {}

  volumeClaimTemplates:
    - metadata:
        name: couchdb-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: {{ .Values.persistence.storageClass | default "couchdb-storage-class" | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | default "5Gi" }}

---
# Headless Service
apiVersion: v1
kind: Service
metadata:
  name: {{ include "couchdb.name" . }}-headless
  labels:
    {{- include "couchdb.labels" . | nindent 4 }}
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app: {{ include "couchdb.name" . }}
  ports:
    - { name: http,        port: {{ .Values.service.port | default 5984 }}, targetPort: {{ .Values.service.port | default 5984 }} }
    - { name: epmd,        port: 4369, targetPort: 4369 }
    - { name: erlang-9100, port: 9100, targetPort: 9100 }
    - { name: erlang-9101, port: 9101, targetPort: 9101 }
    - { name: erlang-9102, port: 9102, targetPort: 9102 }
    - { name: erlang-9103, port: 9103, targetPort: 9103 }
    - { name: erlang-9104, port: 9104, targetPort: 9104 }
    - { name: erlang-9105, port: 9105, targetPort: 9105 }

---
# Client Service
apiVersion: v1
kind: Service
metadata:
  name: {{ include "couchdb.fullname" . }}
  labels:
    {{- include "couchdb.labels" . | nindent 4 }}
spec:
  type: {{ .Values.service.type | default "ClusterIP" }}
  selector:
    app: {{ include "couchdb.name" . }}
  ports:
    - { name: http, port: {{ .Values.service.port | default 5984 }}, targetPort: {{ .Values.service.port | default 5984 }} }