apiVersion: v1
kind: ServiceAccount
metadata:
  name: shisha-pocketbase-token-job-sa
  namespace: shisha
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: shisha-pocketbase-token-job-role
  namespace: shisha
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: shisha-pocketbase-token-job-rb
  namespace: shisha
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: shisha-pocketbase-token-job-role
subjects:
  - kind: ServiceAccount
    name: shisha-pocketbase-token-job-sa
    namespace: shisha
---
apiVersion: batch/v1
kind: Job
metadata:
  name: shisha-pocketbase-token-create
  namespace: shisha
spec:
  backoffLimit: 3
  template:
    spec:
      serviceAccountName: shisha-pocketbase-token-job-sa
      restartPolicy: OnFailure
      containers:
        - name: token-creator
          image: bitnami/kubectl:1.27.3
          imagePullPolicy: IfNotPresent
          env:
            - name: POCKETBASE_URL
              value: "http://shisha-pocketbase:8090"
            - name: ADMIN_EMAIL
              valueFrom:
                secretKeyRef:
                  name: shisha-pocketbase-admin
                  key: email
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: shisha-pocketbase-admin
                  key: password
            - name: NAMESPACE
              value: shisha
          command:
            - /bin/sh
            - -c
            - |
              set -euo pipefail
              SECRET_NAME="shisha-pocketbase-token"
              RETRIES=30
              SLEEP=2
              i=0
              echo "waiting for PocketBase at $POCKETBASE_URL ..."
              until [ $i -ge $RETRIES ]
              do
                if curl -s -f "$POCKETBASE_URL/" >/dev/null 2>&1; then
                  echo "pocketbase reachable"
                  break
                fi
                i=$((i+1))
                sleep $SLEEP
              done
              if [ $i -ge $RETRIES ]; then
                echo "timeout waiting for PocketBase"
                exit 1
              fi
              if kubectl get secret "$SECRET_NAME" -n "$NAMESPACE" >/dev/null 2>&1; then
                echo "token secret $SECRET_NAME already exists; skipping creation"
                exit 0
              fi
              resp=$(curl -s -X POST -H "Content-Type: application/json" -d "{\"identity\":\"$ADMIN_EMAIL\",\"password\":\"$ADMIN_PASSWORD\"}" "$POCKETBASE_URL/api/admins/auth-with-password")
              token=$(echo "$resp" | tr -d '\n' | sed -E 's/.*"token":"([^"]+)".*/\1/;t; s/.*"data":\{.*"token":"([^"]+)".*/\1/;t; s/.*"token":\s*"([^"]+)".*/\1/;t; s/.*"data":\{.*"token":\s*"([^"]+)".*/\1/;t; s/.*"accessToken":"([^"]+)".*/\1/;t; s/.*/null/')
              if [ -z "$token" ] || [ "$token" = "null" ]; then
                echo "failed to obtain admin token; response: $resp"
                exit 1
              fi
              kubectl create secret generic "$SECRET_NAME" -n "$NAMESPACE" --from-literal=token="$token" --dry-run=client -o yaml | kubectl apply -f -
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      tolerations:
        - operator: "Exists"