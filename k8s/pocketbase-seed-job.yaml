apiVersion: batch/v1
kind: Job
metadata:
  name: shisha-pocketbase-seed
  namespace: shisha
spec:
  backoffLimit: 1
  template:
    spec:
      serviceAccountName: shisha-pocketbase-token-job-sa
      restartPolicy: OnFailure
      containers:
        - name: seed-data
          image: bitnami/kubectl:1.27.3
          imagePullPolicy: IfNotPresent
          env:
            - name: POCKETBASE_URL
              value: "http://shisha-pocketbase:8090"
            - name: NAMESPACE
              value: shisha
            - name: TOKEN_SECRET_NAME
              value: "shisha-pocketbase-token"
            - name: ADMIN_SECRET_NAME
              value: "shisha-pocketbase-admin"
          command:
            - /bin/sh
            - -c
            - |
              set -euo pipefail
              RETRIES=30
              SLEEP=2
              i=0
              echo "waiting for PocketBase at $POCKETBASE_URL ..."
              until [ $i -ge $RETRIES ]
              do
                if curl -s -f "$POCKETBASE_URL/" >/dev/null 2>&1; then
                  echo "pocketbase reachable"
                  break
                fi
                i=$((i+1))
                sleep $SLEEP
              done
              if [ $i -ge $RETRIES ]; then
                echo "timeout waiting for PocketBase"
                exit 1
              fi

              ADMIN_TOKEN=""
              if kubectl get secret "$TOKEN_SECRET_NAME" -n "$NAMESPACE" >/dev/null 2>&1; then
                ADMIN_TOKEN=$(kubectl get secret "$TOKEN_SECRET_NAME" -n "$NAMESPACE" -o jsonpath='{.data.token}' | base64 -d)
              fi

              if [ -z "$ADMIN_TOKEN" ]; then
                if ! kubectl get secret "$ADMIN_SECRET_NAME" -n "$NAMESPACE" >/dev/null 2>&1; then
                  echo "admin secret $ADMIN_SECRET_NAME not found; cannot obtain admin token"
                  exit 1
                fi
                ADMIN_EMAIL=$(kubectl get secret "$ADMIN_SECRET_NAME" -n "$NAMESPACE" -o jsonpath='{.data.email}' | base64 -d)
                ADMIN_PASSWORD=$(kubectl get secret "$ADMIN_SECRET_NAME" -n "$NAMESPACE" -o jsonpath='{.data.password}' | base64 -d)
                resp=$(curl -s -X POST -H "Content-Type: application/json" -d "{\"identity\":\"$ADMIN_EMAIL\",\"password\":\"$ADMIN_PASSWORD\"}" "$POCKETBASE_URL/api/admins/auth-with-password")
                token=$(echo "$resp" | tr -d '\n' | sed -E 's/.*"token":"([^"]+)".*/\1/;t; s/.*"data":\{.*"token":"([^"]+)".*/\1/;t; s/.*"accessToken":"([^"]+)".*/\1/;t; s/.*/null/')
                if [ -z "$token" ] || [ "$token" = "null" ]; then
                  echo "failed to obtain admin token; response: $resp"
                  exit 1
                fi
                ADMIN_TOKEN="$token"
              fi

              records='
              [
                {"name":"Mint Breeze","flavor":"Minze","manufacturer":{"name":"Al Fakher"},"ratings":[{"user":"alice","score":4},{"user":"bob","score":1}],"comments":[{"user":"bob","message":"Leicht und frisch"}],"smokedCount":0},
                {"name":"Double Apple Deluxe","flavor":"Double Apple","manufacturer":{"name":"Nakhla"},"ratings":[{"user":"carla","score":8},{"user":"dan","score":7}],"comments":[{"user":"carla","message":"Classic taste"}],"smokedCount":5}
              ]
              '
              recs=$(echo "$records" | sed 's/},[[:space:]]*{/\n/g' | sed 's/^[[:space:]]*\\[//;s/\\][[:space:]]*$//')
              for r in $(echo "$recs"); do
                rec=$(echo "$r" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                case "$rec" in
                  \{*) ;;
                  *) rec="{$rec" ;;
                esac
                case "$rec" in
                  *\}) ;;
                  *) rec="$rec}" ;;
                esac
                name=$(echo "$rec" | sed -n 's/.*"name"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p' || true)
                if [ -z "$name" ]; then
                  echo "cannot determine name"
                  continue
                fi
                if curl -s -H "X-Admin-Token: $ADMIN_TOKEN" "$POCKETBASE_URL/api/collections/shishas/records?perPage=200" | grep -q "\"name\":\"$name\""; then
                  echo "skip $name"
                  continue
                fi
                payload=$(printf '{"data": %s}' "$rec")
                cret=$(curl -s -o /dev/null -w "%{http_code}" -X POST -H "Content-Type: application/json" -H "X-Admin-Token: $ADMIN_TOKEN" -d "$payload" "$POCKETBASE_URL/api/collections/shishas/records")
                if [ "$cret" -ge 200 ] && [ "$cret" -lt 300 ]; then
                  echo "created $name"
                else
                  echo "failed $name (status $cret)"
                fi
              done
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      tolerations:
        - operator: "Exists"