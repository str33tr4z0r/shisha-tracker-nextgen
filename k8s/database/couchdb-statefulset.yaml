# StatefulSet für Apache CouchDB
# - Initialer Deploy: replicas: 1 (vollständig clusterfähig für spätere Skalierung)
# - serviceName: couchdb-headless für stabile Pod-Hostnames (Ordinal DNS)
# - Keine IP-Hardcodes: DNS/Ordinals werden verwendet
# - Sidecar 'cluster-manager' führt postStart/preStop-Skripte aus (aus ConfigMap gemountet)
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: couchdb
  namespace: shisha
  labels:
    app: couchdb
spec:
  serviceName: couchdb-headless
  replicas: 1
  selector:
    matchLabels:
      app: couchdb
  template:
    metadata:
      labels:
        app: couchdb
    spec:
      serviceAccountName: couchdb-sa
      terminationGracePeriodSeconds: 120
      # Bevorzugte Anti-Affinity, um Pods auf verschiedene Nodes zu ziehen (falls mehrere Replicas)
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: couchdb
      containers:
        - name: couchdb
          image: couchdb:3.2.2
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5984
              protocol: TCP
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            # COUCHDB_NODENAME konstruiert aus POD_NAME (ordinal) und Headless-DNS
            - name: COUCHDB_NODENAME
              value: "couchdb@$(POD_NAME).couchdb-headless.$(POD_NAMESPACE).svc.cluster.local"
            - name: COUCHDB_USER
              valueFrom:
                secretKeyRef:
                  name: shisha-couchdb-admin
                  key: COUCHDB_USER
            - name: COUCHDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: shisha-couchdb-admin
                  key: COUCHDB_PASSWORD
            - name: ERLANG_COOKIE
              valueFrom:
                secretKeyRef:
                  name: shisha-couchdb-admin
                  key: ERLANG_COOKIE
            - name: ERL_FLAGS
              value: "-name $(COUCHDB_NODENAME) -setcookie $(ERLANG_COOKIE) -kernel inet_dist_listen_min 9100 inet_dist_listen_max 9105"
          readinessProbe:
            httpGet:
              path: /_up
              port: 5984
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /_up
              port: 5984
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 6
          volumeMounts:
            - name: couchdb-data
              mountPath: /opt/couchdb/data
            - name: couchdb-config
              mountPath: /etc/couchdb
              readOnly: true
        - name: cluster-manager
          image: curlimages/curl:latest
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - "while true; do sleep 3600; done"
          # Sidecar darf Hauptcontainer nicht blockieren: postStart startet Skript im Hintergrund (&).
          # Verwende portable Shell-Umleitung (>/file 2>&1), da /bin/sh nicht unbedingt Bash ist.
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    # PostStart: Starte Skript im Hintergrund, schreibe Logs nach /tmp (schreibbar für non-root).
                    # Verwende nohup, damit der Hintergrundprozess nach Shell-Exit weiterläuft.
                    nohup /opt/couchdb-scripts/postStart.sh >/tmp/cluster-manager-poststart.log 2>&1 &
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    # PreStop synchron ausführen; Logs nach /tmp (schreibbar für non-root).
                    /opt/couchdb-scripts/preStop.sh >/tmp/cluster-manager-prestop.log 2>&1
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: COUCHDB_USER
              valueFrom:
                secretKeyRef:
                  name: shisha-couchdb-admin
                  key: COUCHDB_USER
            - name: COUCHDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: shisha-couchdb-admin
                  key: COUCHDB_PASSWORD
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          # Sidecar-Readiness: setzt Gate-Datei /tmp/couchdb-ready; Pod ist erst ready wenn beide Container ready sind.
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - test -f /tmp/couchdb-ready && echo ok
            initialDelaySeconds: 2
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 10
          volumeMounts:
            - name: couchdb-scripts
              mountPath: /opt/couchdb-scripts
              readOnly: true
            - name: couchdb-config
              mountPath: /etc/couchdb
              readOnly: true
      volumes:
        - name: couchdb-scripts
          configMap:
            name: couchdb-scripts
            # Wichtig: ConfigMap-Dateien enthalten Scripts; setze execute-Bits via defaultMode,
            # damit Lifecycle-Hooks die Skripte direkt ausführen können (/opt/.../postStart.sh).
            # Ohne defaultMode sind Dateien normalerweise 0644 und nicht ausführbar.
            defaultMode: 0755
        - name: couchdb-config
          configMap:
            name: couchdb-config
  volumeClaimTemplates:
    - metadata:
        name: couchdb-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 5Gi
        storageClassName: microk8s-hostpath
---
# ClusterIP Service für interne Erreichbarkeit von CouchDB
# DE: Name auf "shisha-couchdb" geändert, damit bestehende Anwendungen (COUCHDB_URL=http://shisha-couchdb:5984) DNS auflösen.
apiVersion: v1
kind: Service
metadata:
  name: shisha-couchdb
  namespace: shisha
  labels:
    app: couchdb
spec:
  type: ClusterIP
  selector:
    app: couchdb
  ports:
    - name: http
      port: 5984
      targetPort: 5984
      protocol: TCP